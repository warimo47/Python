import numpy as np
import numpy.linalg as lin
import cv2
import math

degree_AxisX = 130
degree_AxisY = 0
degree_AxisZ = 0
AxisX_R = np.array([[1, 0, 0], \
    [0, math.cos(math.radians(degree_AxisX)), - math.sin(math.radians(degree_AxisX))], \
    [0, math.sin(math.radians(degree_AxisX)), math.cos(math.radians(degree_AxisX))]])
AxisY_R = np.array([[math.cos(math.radians(degree_AxisY)), 0, - math.sin(math.radians(degree_AxisY))], \
    [0, 1, 0], \
    [math.sin(math.radians(degree_AxisY)), 0, math.cos(math.radians(degree_AxisY))]])
AxisZ_R = np.array([[math.cos(math.radians(degree_AxisZ)), - math.sin(math.radians(degree_AxisZ)), 0], \
    [math.sin(math.radians(degree_AxisZ)), math.cos(math.radians(degree_AxisZ)), 0], \
    [0, 0, 1]])
R = AxisX_R @ AxisY_R @ AxisZ_R

print(R)

# mtx = np.array([[1900, 0, 960], [0, 1893, 540], [0, 0, 1]])
# 
# invMtx = lin.inv(mtx)
# print("%.6f %.6f %.6f" %(invMtx[0][0], invMtx[0][1], invMtx[0][2]))
# print("%.6f %.6f %.6f" %(invMtx[1][0], invMtx[1][1], invMtx[1][2]))
# print("%.6f %.6f %.6f" %(invMtx[2][0], invMtx[2][1], invMtx[2][2]))
# 
# uvMat = [[0], [0], [1]]
# result = invMtx @ uvMat
# print(result)
# 
# uvMat = [[960], [540], [1]]
# result = invMtx @ uvMat
# print(result)
# 
# uvMat = [[1920], [1080], [1]]
# result = invMtx @ uvMat
# print(result)
# 
# uvMat = [[1920], [540], [1]]
# result = invMtx @ uvMat
# print(result)
# 
# uvMat = [[960], [1080], [1]]
# result = invMtx @ uvMat
# print(result)

# rvecs = [np.array([1.798621847, 0.145740354, -0.161674561]), \
#     np.array([1.803315254, 0.064392157, -0.097139394]), \
#     np.array([1.803254995, -0.018951577, -0.030732423]), \
#     np.array([1.752267052, 0.143374538, -0.159968838]), \
#     np.array([1.756334116, 0.064706969, -0.09538034]), \
#     np.array([1.755868572, -0.01554445, -0.028705375]), \
#     np.array([1.703885155, 0.142216796, -0.160446774]), \
#     np.array([1.709565992, 0.065817332, -0.094591197]), \
#     np.array([1.710802095, -0.012442201, -0.027496732])]
# 
# rodriguesR = np.zeros(shape = (3, 3))
# 
# for rv in rvecs:
#     cv2.Rodrigues(rv, rodriguesR)
#     print(str(rodriguesR[0][0]) + "," + str(rodriguesR[0][1]) + "," + str(rodriguesR[0][2]))
#     print(str(rodriguesR[1][0]) + "," + str(rodriguesR[1][1]) + "," + str(rodriguesR[1][2]))
#     print(str(rodriguesR[2][0]) + "," + str(rodriguesR[2][1]) + "," + str(rodriguesR[2][2]) + "\n")

# rvecs = np.array([[1.75633411627766], [0.0647069685088818], [-0.0953803395241818]])
# 
# rodriguesR = np.zeros(shape = (3, 3))
# 
# cv2.Rodrigues(rvecs, rodriguesR)
# print("\nRodrigues R")
# print(rodriguesR)
# 
# degree_AxisX = 104.342582
# degree_AxisY = 0.355764
# degree_AxisZ = 2.837426
# 
# while True:
#     AxisX_R = np.array([[1, 0, 0], \
#         [0, math.cos(math.radians(degree_AxisX)), - math.sin(math.radians(degree_AxisX))], \
#         [0, math.sin(math.radians(degree_AxisX)), math.cos(math.radians(degree_AxisX))]])
# 
#     AxisY_R = np.array([[math.cos(math.radians(degree_AxisY)), 0, - math.sin(math.radians(degree_AxisY))], \
#         [0, 1, 0], \
#         [math.sin(math.radians(degree_AxisY)), 0, math.cos(math.radians(degree_AxisY))]])
# 
#     AxisZ_R = np.array([[math.cos(math.radians(degree_AxisZ)), - math.sin(math.radians(degree_AxisZ)), 0], \
#         [math.sin(math.radians(degree_AxisZ)), math.cos(math.radians(degree_AxisZ)), 0], \
#         [0, 0, 1]])
# 
#     R = AxisX_R @ AxisY_R @ AxisZ_R
# 
#     print("\n" + str(degree_AxisZ) + " Mat R")
#     print(str(R[0][0]) + "," + str(R[0][1]) + "," + str(R[0][2]))
#     print(str(R[1][0]) + "," + str(R[1][1]) + "," + str(R[1][2]))
#     print(str(R[2][0]) + "," + str(R[2][1]) + "," + str(R[2][2]))
# 
#     degree_AxisZ += 0.000001
#     if degree_AxisZ > 2.837441:
#         break

# RT = np.array([ \
#     [1.0, 0.0, 0.0, 0.0], \
#     [0.0, math.cos(-1.91986), - math.sin(-1.91986), 0.0], \
#     [0.0, math.sin(-1.91986), math.cos(-1.91986), 4.8], \
#     [0.0, 0.0, 0.0, 1.0]])
# 
# cameraPos = np.array([[0.0], [10.0], [0.0], [1.0]])
# worldPos = np.array([[0.0], [10.0], [0.0], [1.0]])
# 
# RT_T = lin.inv(RT)
# 
# result = RT_T @ worldPos
# 
# print(result)

# [[ 0.99432781  0.10364939 -0.02385374]
#  [ 0.01993561 -0.40192752 -0.91545444]
#  [-0.10447377  0.90978628 -0.40171403]]

# print(math.sin(90))

# points_world3d = []
# 
# for j in range(18, 27, 2):
#     for i in range(0, -9, -2):
#         points_world3d.append([i, j, 0])
# 
# print(points_world3d)

# [[8, 10, 0], [6, 10, 0], [4, 10, 0], [2, 10, 0], [0, 10, 0], [8, 12, 0], [6, 12, 0], [4, 12, 0], [2, 12, 0], [0, 12, 0], [8, 14, 0], [6, 14, 0], [4, 14, 0], [2, 14, 0], [0, 14, 0], [8, 16, 0], [6, 16, 0], [4, 16, 0], [2, 16, 0], [0, 16, 0], [8, 18, 0], [6, 18, 0], [4, 18, 0], [2, 18, 0], [0, 18, 0]]
# [[4, 10, 0], [2, 10, 0], [0, 10, 0], [-2, 10, 0], [-4, 10, 0], [4, 12, 0], [2, 12, 0], [0, 12, 0], [-2, 12, 0], [-4, 12, 0], [4, 14, 0], [2, 14, 0], [0, 14, 0], [-2, 14, 0], [-4, 14, 0], [4, 16, 0], [2, 16, 0], [0, 16, 0], [-2, 16, 0], [-4, 16, 0], [4, 18, 0], [2, 18, 0], [0, 18, 0], [-2, 18, 0], [-4, 18, 0]]
# [[0, 10, 0], [-2, 10, 0], [-4, 10, 0], [-6, 10, 0], [-8, 10, 0], [0, 12, 0], [-2, 12, 0], [-4, 12, 0], [-6, 12, 0], [-8, 12, 0], [0, 14, 0], [-2, 14, 0], [-4, 14, 0], [-6, 14, 0], [-8, 14, 0], [0, 16, 0], [-2, 16, 0], [-4, 16, 0], [-6, 16, 0], [-8, 16, 0], [0, 18, 0], [-2, 18, 0], [-4, 18, 0], [-6, 18, 0], [-8, 18, 0]]
# [[8, 14, 0], [6, 14, 0], [4, 14, 0], [2, 14, 0], [0, 14, 0], [8, 16, 0], [6, 16, 0], [4, 16, 0], [2, 16, 0], [0, 16, 0], [8, 18, 0], [6, 18, 0], [4, 18, 0], [2, 18, 0], [0, 18, 0], [8, 20, 0], [6, 20, 0], [4, 20, 0], [2, 20, 0], [0, 20, 0], [8, 22, 0], [6, 22, 0], [4, 22, 0], [2, 22, 0], [0, 22, 0]]]
# [[4, 14, 0], [2, 14, 0], [0, 14, 0], [-2, 14, 0], [-4, 14, 0], [4, 16, 0], [2, 16, 0], [0, 16, 0], [-2, 16, 0], [-4, 16, 0], [4, 18, 0], [2, 18, 0], [0, 18, 0], [-2, 18, 0], [-4, 18, 0], [4, 20, 0], [2, 20, 0], [0, 20, 0], [-2, 20, 0], [-4, 20, 0], [4, 22, 0], [2, 22, 0], [0, 22, 0], [-2, 22, 0], [-4, 22, 0]]
# [[0, 14, 0], [-2, 14, 0], [-4, 14, 0], [-6, 14, 0], [-8, 14, 0], [0, 16, 0], [-2, 16, 0], [-4, 16, 0], [-6, 16, 0], [-8, 16, 0], [0, 18, 0], [-2, 18, 0], [-4, 18, 0], [-6, 18, 0], [-8, 18, 0], [0, 20, 0], [-2, 20, 0], [-4, 20, 0], [-6, 20, 0], [-8, 20, 0], [0, 22, 0], [-2, 22, 0], [-4, 22, 0], [-6, 22, 0], [-8, 22, 0]]
# [[8, 18, 0], [6, 18, 0], [4, 18, 0], [2, 18, 0], [0, 18, 0], [8, 20, 0], [6, 20, 0], [4, 20, 0], [2, 20, 0], [0, 20, 0], [8, 22, 0], [6, 22, 0], [4, 22, 0], [2, 22, 0], [0, 22, 0], [8, 24, 0], [6, 24, 0], [4, 24, 0], [2, 24, 0], [0, 24, 0], [8, 26, 0], [6, 26, 0], [4, 26, 0], [2, 26, 0], [0, 26, 0]]
# [[4, 18, 0], [2, 18, 0], [0, 18, 0], [-2, 18, 0], [-4, 18, 0], [4, 20, 0], [2, 20, 0], [0, 20, 0], [-2, 20, 0], [-4, 20, 0], [4, 22, 0], [2, 22, 0], [0, 22, 0], [-2, 22, 0], [-4, 22, 0], [4, 24, 0], [2, 24, 0], [0, 24, 0], [-2, 24, 0], [-4, 24, 0], [4, 26, 0], [2, 26, 0], [0, 26, 0], [-2, 26, 0], [-4, 26, 0]]
# [[0, 18, 0], [-2, 18, 0], [-4, 18, 0], [-6, 18, 0], [-8, 18, 0], [0, 20, 0], [-2, 20, 0], [-4, 20, 0], [-6, 20, 0], [-8, 20, 0], [0, 22, 0], [-2, 22, 0], [-4, 22, 0], [-6, 22, 0], [-8, 22, 0], [0, 24, 0], [-2, 24, 0], [-4, 24, 0], [-6, 24, 0], [-8, 24, 0], [0, 26, 0], [-2, 26, 0], [-4, 26, 0], [-6, 26, 0], [-8, 26, 0]]

# rvecs = [np.array([[ 2.39716243], [ 0.00643657], [-0.01549726]]), \
#     np.array([[ 2.4023664 ], [ 0.00758432], [-0.01087085]]), \
#     np.array([[ 2.4012871 ], [ 0.00502361], [-0.01511133]]), \
#     np.array([[ 2.39871168], [ 0.00723819], [-0.01976027]]), \
#     np.array([[ 2.40066348], [ 0.01007791], [-0.00933283]]), \
#     np.array([[ 2.39910289], [ 0.00153764283], [-0.0131109416]]), \
#     np.array([[ 2.40175499], [ 0.00619047], [-0.01815338]]), \
#     np.array([[ 2.40075497], [ 0.00683308], [-0.01438562]]), \
#     np.array([[ 2.40139077], [ 0.00578933], [-0.00637289]])]
# 
# tvecs = [np.array([[-0.0132861 ], [ 7.29122845], [ 1.76766496]]), \
#     np.array([[0.00164646187], [7.32519305], [1.85517072]]), \
#     np.array([[-0.00884761], [ 7.31841537], [ 1.83583264]]), \
#     np.array([[-0.03091849], [ 7.26637327], [ 1.84637852]]), \
#     np.array([[-0.0391394 ], [ 7.31660051], [ 1.80983197]]), \
#     np.array([[0.05171532], [7.27048698], [1.7975711 ]]), \
#     np.array([[-0.0182006 ], [ 7.31582198], [ 1.84514239]]), \
#     np.array([[-0.02383365], [ 7.33357091], [ 1.77518965]]), \
#     np.array([[0.03339832], [7.29473913], [1.88299888]])]
# 
# mtx = [[481.57110245, 0.0, 985.84778984], [0.0, 313.50328101, 614.51197833], [0.0, 0.0, 1.0]]
# rvecs = [[2.68704701], [-0.04515365], [0.0685591]]
# tvecs = [[0.07508033], [6.57770835], [1.2092695]]